#!/bin/bash
####################################################################################################
# Conventional Commits Checker
# Check commit message by Conventional Commits.
# More info about rules, see: conventionalcommits.org/en/v1.0.0-beta.4/
####################################################################################################

# initial info
## $1 is the original commit msg file that contains some comments generated by git, discard the comments
cat $1 | egrep -v "^#.*" > tmp_commit_msg
COMMIT_MSG_FILE=tmp_commit_msg
COMMIT_SOURCE=$2
SHA1=$3

allowed_types=("feat" "fix" "docs" "style" "refactor" "test" "chore" "build" "ci" "perf" "merge")

# set print info
RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
NC='\033[0m'

printInfo () {
    printf "${GREEN}[COMMIT MESSAGE CHECKER] \n"
    printf "${RED}$1"
    printf "${BROWN}\nAbout conventional commit, see: https://www.conventionalcommits.org"
    printf "${NC}\n"
}

## during checking may create some tmp files that need to be deleted before exit
destroy () {
    rm -f header body footer illegal_part tmp_commit_msg 2> /dev/null
}

# check the three section: header, detail, footer
## spilt commit msg by empty line to files like header, body, footer, if more than three sections, then other part go into illegal_part
awk -v RS= '{if (NR == 1) {print > "header"} else if (NR == 2) {print > "body"} else if (NR == 3) {print > "footer"} else {print > "illegal_part"}    }' $COMMIT_MSG_FILE

if [ -f "illegal_part" ]
    then
    printInfo "Too many message sections! (Header, Body, Footer allowed)"
    destroy
    exit 1
fi

# check header format
## split header by ": " to array
header=$(cat header)
header=${header// /+}
header_array=(${header//:+/ })
if [[ ${header_array[0]} == "merge"* ]] || [[ ${header_array[0]} == "Merge"* ]]
    then
      header_array[0]="merge"
      header_array[1]="merge"
fi

if [ ${#header_array[@]} -ne 2 ]
  then
    printInfo "Wrong header format, which should be: {type}({scope}): {description}"
    destroy
    exit 1
fi



# check type
is_type_allowed=1
startsWithElement () {
  local e match="$1"
  shift
  for e; do [[ "$match" == "$e"* ]] && is_type_allowed=0 && return; done
  is_type_allowed=1
}

startsWithElement "${header_array[0]}" "${allowed_types[@]}"
if [ $is_type_allowed -ne 0 ]
    then
    printInfo "Wrong type detected!\nAllowed: feat, fix, docs, style, refactor, test, chore, build, ci, perf."
    destroy
    exit 1
fi

# check header length
if [ ${#header} -gt 72 ]
    then
    printInfo "Too long header! Header length should be shorter than 72 characters."
    destroy
    exit 1
fi

destroy
exit 0